/* 외장 모듈 사용하기
 * 다른 사람이 만든 모듈(외장 모듈)을 사용하는 방법
 * npm 패키지를 사용하면 다른 사람이 만들어 올려놓은 패키지를 설치 가능
 * 시스템 환경 변수에 접근할 수 있는 모듈의 이름은 nconf
 * 명령프롬프트에 npm install nconf
 * npm으로 설치한 패키지는 그 폴더 안에 만들어진 [node_modules] 폴더 안에 설치된다.
 * 그 안에 [nconf] 폴더를 확인할 수 있다.
 * 
 * 그런데 새로운 프로젝트별로 매번 npm으로 설치해야할까?
 * 만약 모든 프로젝트에 적용하고 싶다면 [node_modules] 폴더를 프로젝트 상위 폴더로 옮기면 해결
 * 메인 파일이 실행될 때 먼저 현재 폴더에 [node_modules] 폴더가 있는지 검색하고 없다면 상위 폴더를 검색한다.
 * 그래도 못 찾는다면 상위 폴더를 순차적으로 검색
 */

var nconf = require('nconf');
nconf.env();

console.log('OS 환경 변수의 값: %s', nconf.get('OS'));

/* nconf가 모듈로 만들어져 있으니 require()함수를 호출하여 불러온다
 * 단, 본인이 직접 만든 모듈이 아니면 상대 경로가 아닌 모듈의 이름만 지정해서 불러온다
 */

/* 만약 다른 프로젝트나 pc에서 사용할 때 번거로움을 없애기 위해 package.json 파일 안에 설치한
 * 패키지 정보를 넣어 둘 수 있다. 이 파일을 만들기 위해서는 다음 명령을 입력하고 실행해야 한다.
 * npm init
 * 영어 질문이 나오면 name: 질문에는 'node'를 입력하고 나머지는 계속 Enter 키만 누릅니다,
 * name: 질문에 입력하는 값은 소문자로 된 영문 이름이면 어떤 것이든 가능합니다. 
 * 그러면 마지막에 현재 폴더안에  package.json 파일이 만들어진다.
 * ==========근데 실습할때 패키지 설치하면서 자동으로 생기던데...=========
 */

/* package.json 파일 안에는 프로젝트에 대한 기본 정보가 들어 있습니다.
 * nconf 모듈을 삭제한 후 다시 설치하는데 이때 --save 옵션을 추가할 것!
 * npm uninstall nconf
 * npm install nconf --save
 * 
 * 이제 package.json 파일을 열어보면 마지막 부분에 dependencies 속성이 추가된 것을 볼 수 있습니다.
 * ==========실습하니까 자동으로 추가 되어있는디....===========
 * 이렇게 설치한 패키지의 정보가 모두 들어간 package.json 파일을 다른 PC로 옮긴 후 다음 명령어를 입력하면 그 안의 패키지가 한꺼번에 설치된다
 * npm install
 * 이 명령은 package.json 파일을 찾은 후 그 안에 있는 dependencies 속성의 값을 참조하여 패키지를 설치한다.
 */